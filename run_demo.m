function run_demo(skip_runs, log_file_name)
    if isempty(gcp('nocreate'))
        parpool;
    end
    addpath(genpath('src'));
    addpath(genpath('vendors'));

    if exist('testing_params.mat', 'file')
        fprintf('Loading test parameters...');
        load('testing_params.mat');
    else
%                        {'2008_000615','2008_001566','2008_004363'},...
        p = cartproduct({4, 1},...
                        {512, 1000},...
                        {1},...
                        {'double'},...
                        {1, 3},...
                        {false, true},...
                        {false, true},...
                        {2},...
                        {true, false},...
                        {'2008_004363'},...
                        {false},...
                        {false, true},...
                        {true},...
                        {{false, false},...
                        {false, true}},...
                        {{false, false, false, false, false, false},...
                        {false, true, false, false, false, false},...
                        {false, false, false, false, true, false}});


        param_group1 = {'naiive_integral_backend',...
                        'use_kdtree',...
                        'integral_backend_overwrite',...
                        'integral_backend_sum',...
                        'integral_backend_matlab_sparse',...
                        'precalced_windows'};

        param_group2 = {'inverse_search',...
                        'window_prefilter'};

        param_names = {'parts',...
                        'clusters',...
                        'integrals_scale_factor',...
                        'codebook_type',...
                        'codebook_scales_count',...
                        'nonmax_type_min',...
                        'use_calibration',...
                        'features_per_roi',...
                        'query_from_integral',...
                        'default_query_file',...
                        'use_libsvm_classification',...
                        'expand_bboxes',...
                        'use_threading'};

        total_runs = numel(p);

        fprintf('Saving test parameters...');
        save('testing_params.mat', 'p', 'param_group1', 'param_group2', 'param_names', 'total_runs', '-v6');
    end
    fprintf('DONE\n');
    train = false;

    current_run = 1;
    if ~exist('skip_runs', 'var')
        skip_runs = 0;
    end

    if ~exist('log_file_name', 'var')
        log_file_name = ['demo_' datestr(now, 'yyyy-mm-dd') '.log'];
    end
    for i=1:numel(p)
        args = p{i};
        msg = sprintf(['###################################\n'...
                       '## Run: %d/%d\n'...
                       '###################################\n'],...
                       current_run, total_runs);

        if skip_runs > 0
            skip_runs = skip_runs - 1;
            fprintf(msg);
        else
            info(msg);
            group1 = args{end};
            args(end) = [];
            group2 = args{end};
            args(end) = [];
            args = [args, group1, group2];
            args = [param_names, param_group1, param_group2; args];
            args = args(:);
            try
                demo(train, 'memory_cache', train,...
                            'log_file', log_file_name,...
                            args{:});
            catch e
                err('Exception %s', getReport(e));
            end
        end

        current_run = current_run + 1;
    end
